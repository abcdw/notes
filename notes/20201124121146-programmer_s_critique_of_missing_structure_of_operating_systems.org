:PROPERTIES:
:ID:       354ed6ba-a2b0-4cab-875e-7939c91c8d0b
:ROAM_REFS: https://blog.rfox.eu/en/Programming/Programmers_critique_of_missing_structure_of_operating_systems.html
:END:
#+title: Programmer's Critique of Missing Structure of Operating Systems

- related :: [[id:d6999c99-68a8-4a9d-b914-fe04de1b6090][What happens when...]]

Author of the article saw some shit. I'll write summary in strong
statements, because I want so. It's for me to easily recall the
content of the article. Also, I'll mix it up with my thoughts and
comments.

* Filesystems
:PROPERTIES:
:ID:       294f886d-188a-4173-a9bc-b21b020e3632
:END:
Filesystems are shitty databases. The directiories metaphor became a
part of implementation. They don't support atomic operations. It's
hardly queriable. You have to use some utilities like ripgrep, find,
etc. Would be great to have FS, which uses message pack like format
instead of sequence of bytes.

ACID is a good thing to have.

logs is a good example of files, which can be implemented with
GoodFS. How easy is to rotate logs with CoW FS: Just add a link on the
part of the file and call it "old-logs". GC will be a little
problematic, when application is using the "file", but probably
solvable. But maybe it also solvable with another program(function)
for logging ala syslog udp api.

* Programs
Program don't have to be a collection of bytes, it can be a collection
of functions or other high-level objects. Lisp machines and smalltalk
is a good example of such approach.
[[id:a3dddfa9-a737-4ff1-ad7b-1bb8ce1d1a3e][The Unix process API is unreliable and unsafe]].

* Data
Currently programming is about transforming data from one format to
another + a little logic to process it. In Unix every program is a
function of (char *), sure why not?

Maybe better to have a Filesystem, which stores structured data? OS,
which operates on structured data? CoW ram to share data between
programs (functions).

What about presistent data structure supported by OS, not language.
The serialization won't be needed anymore, just share some part of the
memory with other process.

message pack, SBE, FlatBuffers, or Cap'n Proto are good example of the
demand, but OS-level support of such tool would bring it onto the next
level.

It will be possible to introspect a binary data as it would be a json.

The other nice property of such approach is an abitility to attach
documentation and other metadata to data.
* Communication
Why we still communicate with bytes, when we can transfer structured
data? ZeroMQ a step in right direction.

* Logs
Should be solved by OS, not developers of every application. Other
info about log in [[id:294f886d-188a-4173-a9bc-b21b020e3632][Filesystems]] section.

Sending structured messages to syslog services is a possible solution.
* For future
I see a problem of bootstrapping. It's not clear where to start to
break a dependency circle: components of the system kinda depends on
each other. Probably a FS is a good starting point, can be implemnted
in other operating system.

* Inspiration
Contains list of links with inspiring idea.

http://bitsavers.trailing-edge.com/pdf/symbolics/software/genera_8/Genera_Concepts.pdf
