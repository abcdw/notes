:PROPERTIES:
:ID:       4d754bb3-3afc-4c14-bbcc-3aad16790a96
:END:
#+title: Building a Programming Language

* Ideas
This is mix of problem/possible solutions.

** Program representation is doomed
The program is get serialized as a text. Loading or compiling it may result in
execution of arbitrary code. Parsing text files is hard, messing up text files
is easy. Dependencies are not a part of the source code/project, they are
managed by another tool or usually tools and it's usually bloated and non
reproducible.

It's not possible to use spaces in variable names.

[[id:6b3de564-e6a3-4cba-ae58-b2bba5a6b815][Structured editing]], understanding of the context, navigation is hard.

Moldable development - excel could be atomic and really meaningful for software
development.

Patches, line-oriented diffs and vcs are suboptimal.

** Dependecy management is doomed
Even in guix they are bloated and referenced by label.

They should be:
- Immutable :: I don't want to be fucked, after minor version bump.
- Atomic :: I don't want to pull the whole emacs, when I need to build org
  file. core-updates in guix needed only because deps are not atomic.

** Modules hierarchy is doomed
Usually you don't want to store functions in hierarchy, but to access them.  So
it logical to store them in one place, but provide an access using different
means: for example ~abs~ can be found in both (lang math) and (lang arithmetic)
"modules", but it doesn't mean there are two versions of ~abs~, it's just too
"module-queries", which both include the same ~abs~.

** Reification is doomed
Providing an object representing some device, or sharing object of another
program is hard.  You can't just pass the object from one program to another,
you usually serialize it to text/binary format and then read/eval it.

Emacs, Nyxt integration.

** Bootstrapping is doomed
Let's make a minimalistic relatively high-level language and build other
languages on top of it.

** Ops is doomed
Setting and maintaining an execution environment for the application, delivering
a software to end user is a nightmare.  It's inadequately hard.

Nginx config file is actually a program and should have a dependency management
as well, an exact version of nginx for example, but more preciesly it should
have only modules required for parsing and execution of it, so we can easily
build a closure "a slim version of nginx for this particular config", which is
just an rtmp proxy without http and all other unneded stuff.

https://systemreboot.net/post/deploy-scripts-using-g-expressions

** Security is doomed
Everything can access almost everything, ambient authority all over the place,
there are a bunch of hacks and workarounds like containers, syncronization
mechanisms, permissions and access lists. Almost all the source code is not
signed => doesn't have a verifiable authorship.

https://medium.com/agoric/pola-would-have-prevented-the-event-stream-incident-45653ecbda99

Values should be immutable => thread/IPC safe and sharable. Process/function
should have access only to things explicitly passed to it, Side effects should
be absolutely limited.

* Questions
** How to provide security updates?

* Materials
** Language Foundations
Read the book about programming languages
[[https://techreports.cs.unc.edu/papers/87-011.pdf][Three Implementation Models for Scheme]]
[[id:ec056814-d1fb-49ee-b4cd-a71840bca1ee][Practical Foundations for Programming Languages]]
https://justinethier.github.io/cyclone/docs/r7rs.pdf
[[https://youtu.be/_ahvzDzKdB0][Growing a Language, by Guy Steele]]

** Books
https://pragprog.com/titles/btlang/seven-languages-in-seven-weeks/
https://pragprog.com/titles/7lang/seven-more-languages-in-seven-weeks/
https://dmkpress.com/catalog/computer/programming/978-5-94074-539-6/

** Numbers
https://www.deinprogramm.de/sperber/papers/numerical-tower.pdf

** Security
[[id:e08bd26b-3df9-4d36-8887-3a503c1b7e0d][What Are Capabilities?]]

[[https://www.ponylang.io/discover/#what-is-pony][pony langy]] :: open-source, object-oriented, actor-model, capabilities-secure,
high-performance programming language.

** Macros
https://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/

** Syntax
On parentheses less syntax
https://beautifulracket.com/appendix/thoughts-on-rhombus.html

** Interesting Links
- [[https://codeberg.org/scheme/r7rs/issues/127][What should be the features of the language RÏ‰RS?]]
- https://www.draketo.de/software/guile-10x
- https://www.nongnu.org/guile-reader/doc/guile-reader.html

** Examples
*** Other interesting languages
https://www.ponylang.io/discover/#what-is-pony
*** Clojure flavoured
- Jannet
- Carp
- Fennel
*** Query languges
https://www.malloydata.dev/

** Problems
- https://clojure-goes-fast.com/blog/clojures-deadly-sin/
