:PROPERTIES:
:ID:       49057edb-c175-4df4-968b-842562ceb692
:END:
#+title: Guix Build Systems
#+filetags: :Stream:

* Introduction
We used to build programs with our shell, but let's see how it's done
in GNU Guix.  Today we will learn:
- How to define packages.
- What build system are and why they exists.

Will get our hands dirty and explore packages and build systems.

* Defining Packages
info: [[info:guix#Defining Packages][guix#Defining Packages]]

#+begin_src scheme
(define-module (gnu packages hello)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system gnu)
  #:use-module (guix licenses)
  #:use-module (gnu packages gawk))

(define-public hello
  (package
    (name "hello")
    (version "2.10")
    (source (origin
              (method url-fetch)
              (uri (string-append "mirror://gnu/hello/hello-" version
                                  ".tar.gz"))
              (sha256
               (base32
                "0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i"))))
    (build-system gnu-build-system)
    (arguments (list #:configure-flags #~'("--enable-silent-rules")))
    ;; (arguments '(#:configure-flags '("--enable-silent-rules")))
    (inputs (list gawk))
    (synopsis "Hello, GNU world: An example GNU package")
    (description "Guess what GNU Hello prints!")
    (home-page "https://www.gnu.org/software/hello/")
    (license gpl3+)))
#+end_src

** Inputs
- inputs :: build for target architecture.
- native :: host (build machine) arch, usually build time utils.
- propagated :: will be added to profile along with the package.
- direct :: all of the above.
- implicit :: added by build system.
- development :: all of the above.

* Build Systems
Consist of phases, arguments, dependencies, utils.

To name a few of them:
- ~trivial-build-system~
- ~copy-build-system~
- ~gnu-build-system~
- ~emacs-build-system~
- ~cargo/go/clojure/maven/ant/r/etc~

** Phases and Arguments
define*, lambda* #:allow-other-keys

** Modules and Imported Modules
~#:imported-modules~ will be available on the build side, ~#:modules~ will
be added to ~(use-modules ...)~ definition.

** API
~(guix build utils)~ contains a lot of helpers available usually build time.
- ~substitute~
- ~modify-phases~
- etc

~(guix packages)~
- ~modify-inputs~

* Conclusion
- GNU Guix describes build process in GNU Guile.
- Build system simplifies frequent build workflows.
- Guix is absolutely hackable.
- Make love and not war.
