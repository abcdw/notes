:PROPERTIES:
:ID:       af57822b-0794-40f4-9649-d19d7dec7fdb
:END:
#+title: Guix Problems

Notes for myself, not intended for external reader without context,
but if you want to understand more underlying issues, just ask.

* Interactive Phase Launch
https://fosstodon.org/@csepp@merveilles.town/112961828242923443
#+begin_quote
So far a clear win for #Nix over #Guix for me: it's very easy to run build steps from a shell.  I don't have to jump through hoops, like adding a deliberate error after a build phase in Scheme and enabling keep-failed and then entering the build environment and copy-pasting commands from the log to re-run them.
None of that nonsense, you just enter a nix-shell '<nixpkgs>' -A pkgname, set out to some output folder in /tmp, then run your build phases, or a generic build.
#+end_quote
Related suggestion: https://issues.guix.gnu.org/68315

* ~guix pull~ is not reproducible
guix pull from the same channel definition with specific commits
produces different profiles hashes on different machines.
https://issues.guix.gnu.org/69284

* Services are drafty, untested and inflexible
You can't add rtmp section to nginx.  directory-service don't export
backend-userroot-configuration, create-suffix-entry? breaks the
config.
https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/services/ldap.scm?h=0beb0dbfe0#n136

Records doesn't provide "compile-time guarantees" and doesn't allow
to implement arbitrary config at the same time.
[[id:491729f7-9716-4280-a5a5-db7bbec2b698][Alists and Records in Guix Services]].

* CLI coupled with package definitions
When using time-machine you need to consider that interface of guix
shell was different, at some point of time there were no guix shell
interface at all.  So even if you want to get only an old version of
one package and spawn the environment with it, you can't do it.

The development of guix shell and other CLI parts is hard, because you
have to keep in mind time-machine use cases, you have to keep backward
compatibility and all that stuff.
